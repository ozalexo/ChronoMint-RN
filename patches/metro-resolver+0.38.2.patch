patch-package
--- a/node_modules/metro-resolver/src/resolve.js
+++ b/node_modules/metro-resolver/src/resolve.js
@@ -17,6 +17,7 @@ const InvalidPackageError = require('./InvalidPackageError');
 const formatFileCandidates = require('./formatFileCandidates');
 const isAbsolutePath = require('absolute-path');
 const path = require('path');
+const fs = require('fs');
 
 
 
@@ -106,9 +107,30 @@ platform)
     }
   }
 
+  function extractChronobankModulePath (dirPath) {
+    let bits = path.normalize(dirPath).split(path.sep);
+    if (bits.includes('@chronobank')) {
+      const chronoIndex = bits.indexOf('@chronobank');
+      let realChronoPath = '';
+      let chronoPath = path.join('/', ...bits.slice(0, chronoIndex + 2));
+      let chronoPathStats = fs.existsSync(chronoPath) && fs.lstatSync(chronoPath);
+      if (chronoPathStats && chronoPathStats.isSymbolicLink()) {
+        realChronoPath = fs.realpathSync(chronoPath);
+      } else {
+        return dirPath;
+      }
+      let restPath = path.join(...bits.slice(chronoIndex + 2, bits.length));
+      return path.join(realChronoPath, restPath);
+    } else {
+      return dirPath;
+    }
+  }
+
   const allDirPaths = dirPaths.concat(extraPaths);
   for (let i = 0; i < allDirPaths.length; ++i) {
-    const realModuleName = context.redirectModulePath(allDirPaths[i]);
+    let realPath = allDirPaths[i];
+    realPath = extractChronobankModulePath(realPath);
+    const realModuleName = context.redirectModulePath(realPath);
     const result = resolveFileOrDir(context, realModuleName, platform);
     if (result.type === 'resolved') {
       return result.resolution;
